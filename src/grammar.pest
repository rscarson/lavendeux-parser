atomic_value = {hex|bin|oct|currency|sci|float|int|boolean|string|identifier}
    hex = @{(^"0x") ~ ('a'..'f' | 'A'..'F' | '0'..'9')+}
    bin = @{(^"0b") ~ ('0'..'1')+}
    oct = @{(^"0o" | "0") ~ ('0'..'7')+}
    sci = @{(float | int) ~ ^"e" ~ ("+"|"-")? ~ ('0'..'9')+}
    float = @{int? ~ "." ~ ('0'..'9')+}
    boolean = @{^"true" | ^"false"}
    int = @{('0'..'9'){4,} | (('0'..'9'){1,3} ~ ("," ~ ('0'..'9'){3})*)}
    string = @{("\"" ~ ("\\"~ANY | (!"\"" ~ ANY))* ~ "\"") | ("\'" ~ ("\\"~ANY | (!"\'" ~ ANY))* ~ "\'")}
    identifier = @{('a'..'z' | 'A'..'Z' | "_") ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")*}

currency_symbol = @{"$" | "€" | "£" | "¥"}
currency = @{currency_symbol ~ int ~ ("." ~ ('0'..'9')+)?}

plus = {"+"}
minus = {"-"}
multiply = {"*"}
divide = {"/"}
modulus = {"%"}
power = @{"**"}
bool_and = @{"&&"}
bool_or = @{"||"}
and = {"&"}
or = {"|"}
xor = {"^"}
lshift = @{"<<"}
rshift = @{">>"}
lt = {"<"}
gt = {">"}
eq = @{"=="}
ne = @{"!="}
factorial = {"!"}
not = {"~"}
comma = {","}
decorator = {"@"}
equal = {"="}
lparen = {"("}
rparen = {")"}

function_assignment = {((identifier ~ lparen ~ rparen) | identifier ~ lparen ~ identifier ~ (comma ~ identifier)* ~ rparen) ~ equal ~ toplevel_expression}

expression_list = {toplevel_expression ~ (comma ~ toplevel_expression)+}

toplevel_expression = {ternary_expression}

ternary_expression = {bool_or_expression ~ ("?" ~ bool_or_expression ~ ":" ~ bool_or_expression)*}
bool_or_expression = {bool_and_expression ~ (bool_or ~ bool_and_expression)*}
bool_and_expression = {bool_cmp_expression ~ (bool_and ~ bool_cmp_expression)*}
bool_cmp_expression = {or_expression ~ ((lt|gt|eq|ne) ~ or_expression)*}
or_expression = {xor_expression ~ (or ~ xor_expression)*}
xor_expression = {and_expression ~ (xor ~ and_expression)*}
and_expression = {sh_expression ~ (and ~ sh_expression)*}
sh_expression = {as_expression ~ ((lshift|rshift) ~ as_expression)*}
as_expression = {md_expression ~ ((plus|minus) ~ md_expression)*}
md_expression = {implied_mul_expression ~ ((multiply|divide|modulus) ~ implied_mul_expression)*}
implied_mul_expression = {power_expression ~ (!minus ~ power_expression)*}
power_expression = {call_expression ~ (power ~ call_expression)*}
call_expression = {identifier ~ lparen ~ toplevel_expression ~ rparen | identifier ~ lparen ~ expression_list? ~ rparen | prefix_unary_expression}
prefix_unary_expression = {(not|minus)+ ~ postfix_unary_expression | postfix_unary_expression}
postfix_unary_expression = {term ~ (factorial ~ !"=")+ | term}
term = {lparen ~ toplevel_expression ~ rparen | atomic_value}

assignment_expression = {(identifier ~ equal ~ !"=")? ~ toplevel_expression}
comment = _{"//" ~ (!eol ~ ANY)*}
eol = {NEWLINE+|EOI}
line = {(comment | ((function_assignment|assignment_expression) ~ (decorator ~ identifier)? ~ comment?)) ~ eol }
script = {eol? ~ line+ | eol}

WHITESPACE = _{" " | "\t"}